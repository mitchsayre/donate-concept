datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "./generated"
  fileName = "kysely.d.ts"
}

generator zod {
  provider         = "zod-prisma-types"
  useMultipleFiles = true // default is false
  writeBarrelFiles = true // default is true
  createInputTypes = false // default is true
  // createModelTypes = false // default is true
  addIncludeType   = false
  addSelectType    = false
  // createRelationValuesTypes = true
  // createRelationValuesTypes = true
  // addInputTypeValidation   = false // default is true
  // addIncludeType           = false // default is true
  // addSelectType            = false // default is true
  // validateWhereUniqueInput = false // default is true
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
}

model User {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String   @unique
  // cognitoSub            String   @unique @db.Uuid
  passwordEncrypted     String
  refreshTokenEncrypted String?
  role                  Role
  Admin                 Admin?   @relation("UserAdmin")
  updatedDate           DateTime
  createdDate           DateTime
  createdById           String   @db.Uuid
  updatedById           String   @db.Uuid
  isDeleted             Boolean
}

enum Role {
  Owner
  Admin
}

model Admin {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// @zod.custom.omit([model])
  name     String
  email    String @unique /// @zod.custom.omit([model]) // how will this work with sso?
  clientId String @db.Uuid /// @zod.custom.omit([model])
  userId   String @unique @db.Uuid /// @zod.custom.omit([model])
  Client   Client @relation(fields: [clientId], references: [id], name: "ClientAdmins")
  User     User   @relation(fields: [userId], references: [id], name: "UserAdmin")
}

// Should this be called Organization
model Client {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contactEmail         String? /// @zod.string.email({ message: 'Invalid email address' })
  contactPhone         String? /// @zod.string.regex(/^[1-9]\d{1,14}$/, {message: 'Invalid phone number'})
  name                 String?
  description          String?
  colorPrimary         String?
  colorSecondary       String?
  urlPathname          String?   @unique // enforce no slash??
  logoUrl              String?
  logoUrlSigned        String? /// @zod.custom.omit([model])
  bannerPhotoUrl       String?
  bannerPhotoUrlSigned String? /// @zod.custom.omit([model])
  admins               Admin[]   @relation("ClientAdmins")
  listings             Listing[] @relation("ClientListings")
}

model Listing {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  imageUrl       String?
  imageUrlSigned String?
  price          String?
  contactEmails  String[] /// @zod.string.email({ message: 'Invalid email address' })
  status         ListingStatus @default(Draft)
  clientId       String        @db.Uuid
  Client         Client        @relation(fields: [clientId], references: [id], name: "ClientListings")
}

enum ListingStatus {
  Draft
  Public
  Funded
  Archived
}

// !!Admin

// !!Client

// !!DonorPage (better name)

// !!Listing (or Cause)

// ??Subscription
