datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
  output   = "./generated"
  fileName = "kysely.d.ts"
}

generator zod {
  provider         = "zod-prisma-types"
  useMultipleFiles = true // default is false
  writeBarrelFiles = true // default is true
  createInputTypes = false // default is true
  // createModelTypes = false // default is true
  addIncludeType   = false
  addSelectType    = false
  // createRelationValuesTypes = true
  // createRelationValuesTypes = true
  // addInputTypeValidation   = false // default is true
  // addIncludeType           = false // default is true
  // addSelectType            = false // default is true
  // validateWhereUniqueInput = false // default is true
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
}

enum Role {
  Owner
  Admin
}

enum AuthMethod {
  Email
  Google
  Microsoft
  Pending
  None
}

// Owner creates a new organization and owner creates a new admin (or just invites an admin via email)
// sign up other admin owner sends an invite link 
// admin needs some sort of token in the link to their email
// When admin invites a new admin this creates a user record in the database with that email

// Need some type of mechanism that revokes the access link sent to the user email after an amount of time
// They also will not be able to sign up if the current admin revokes the invite link
// This logic could be driven from the refresh token

// How does the refresh token work if they sign in on a new device

// parse token and give them option to sign up with email password or sign up with Google or Microsoft oauth
// If OAuth: take the response (make sure microsoft or google is in the state param) and set their auth method to google or microsoft
// If email and password set their auth method to email and set their passwordEncrypted and passwordSalt in plain text
// Init their refresh token (or this may have already been initialized when the invite link was generated)

// token {
//   id: string
//   userId: string
//   refreshTokenEncrypted: string
//   expiresAt: Date
// }

model User {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String        @unique
  passwordEncrypted String?
  passwordSalt      String?
  // refreshTokenEncrypted String?
  role              Role
  authMethod        AuthMethod
  organizationId    String?       @db.Uuid /// @zod.custom.omit([model])
  organization      Organization? @relation(fields: [organizationId], references: [id], name: "OrganizationUsers")

  createdDate DateTime
  updatedDate DateTime
  createdById String   @db.Uuid
  updatedById String   @db.Uuid
  isDeleted   Boolean
}

model RefreshToken {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String @db.Uuid
  expiresAt     Int
  accessTokenId String @unique @db.Uuid

  createdDate DateTime
  updatedDate DateTime
  createdById String   @db.Uuid
  updatedById String   @db.Uuid
  isDeleted   Boolean
}

// model Admin {
//   id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid /// @zod.custom.omit([model])
//   name  String
//   email String @unique /// @zod.custom.omit([model]) // how will this work with sso?

//   userId         String        @unique @db.Uuid /// @zod.custom.omit([model])
//   // user           User          @relation(fields: [userId], references: [id], name: "UserAdmin")
//   // Organization   Organization? @relation(fields: [organizationId], references: [id])
//   organizationId String?       @db.Uuid
//   Organization   Organization? @relation(fields: [organizationId], references: [id])
// }

// Should this be called Organization
model Organization {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contactEmail         String? /// @zod.string.email({ message: 'Invalid email address' })
  contactPhone         String? /// @zod.string.regex(/^[1-9]\d{1,14}$/, {message: 'Invalid phone number'})
  name                 String?
  description          String?
  colorPrimary         String?
  colorSecondary       String?
  urlPathname          String?   @unique // enforce no slash??
  logoUrl              String?
  logoUrlSigned        String? /// @zod.custom.omit([model])
  bannerPhotoUrl       String?
  bannerPhotoUrlSigned String? /// @zod.custom.omit([model])
  // admins               Admin[]   @relation("OrganizationAdmins")
  listings             Listing[] @relation("OrganizationListings")
  User                 User[]    @relation("OrganizationUsers")
}

enum ListingStatus {
  Draft
  Public
  Funded
  Archived
}

model Listing {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  imageUrl       String?
  imageUrlSigned String?
  price          String?
  contactEmails  String[] /// @zod.string.email({ message: 'Invalid email address' })
  status         ListingStatus @default(Draft)
  organizationId String        @db.Uuid
  organization   Organization  @relation(fields: [organizationId], references: [id], name: "OrganizationListings")
}

// !!Admin

// !!Organization

// !!DonorPage (better name)

// !!Listing (or Cause)

// ??Subscription
